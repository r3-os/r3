//! Trigonometry functions compatible with `no_std` and `const fn`

// `[(math.sin(x), math.cos(x)) for x in (2**(i - 24) for i in range(32))]`
#[allow(clippy::excessive_precision)]
const TABLE: &[(f64, f64)] = &[
    (5.960464477539059e-08, 0.9999999999999982),
    (1.1920928955078097e-07, 0.9999999999999929),
    (2.3841857910156025e-07, 0.9999999999999716),
    (4.7683715820310695e-07, 0.9999999999998863),
    (9.536743164061055e-07, 0.9999999999995453),
    (1.9073486328113436e-06, 0.999999999998181),
    (3.8146972656157483e-06, 0.999999999992724),
    (7.629394531175985e-06, 0.9999999999708962),
    (1.5258789061907882e-05, 0.9999999998835847),
    (3.051757812026305e-05, 0.9999999995343387),
    (6.103515621210439e-05, 0.9999999981373549),
    (0.0001220703121968351, 0.9999999925494194),
    (0.0002441406225746808, 0.9999999701976777),
    (0.0004882812305974466, 0.9999998807907128),
    (0.0009765623447795783, 0.9999995231628797),
    (0.001953123758236804, 0.9999980926519735),
    (0.0039062400659001166, 0.99999237061517),
    (0.0078124205273828315, 0.9999694825770951),
    (0.015624364224883372, 0.9998779321710066),
    (0.03124491398532608, 0.9995117584851364),
    (0.0624593178423802, 0.9980475107000991),
    (0.12467473338522769, 0.992197667229329),
    (0.24740395925452294, 0.9689124217106447),
    (0.479425538604203, 0.8775825618903728),
    (0.8414709848078965, 0.5403023058681398),
    (0.9092974268256817, -0.4161468365471424),
    (-0.7568024953079282, -0.6536436208636119),
    (0.9893582466233818, -0.14550003380861354),
    (-0.2879033166650653, -0.9576594803233847),
    (0.5514266812416906, 0.8342233605065102),
    (0.9200260381967907, 0.39185723042955),
    (0.7210377105017316, -0.6928958219201651),
];

pub const fn sincos(theta: f64) -> (f64, f64) {
    let neg = theta < 0.0;
    let theta = if neg { -theta } else { theta };

    let theta_i = (theta * (1u32 << 24) as f64) as u32;

    let mut x = 1.0;
    let mut y = 0.0;

    for i in 0..32 {
        if (theta_i & (1u32 << i)) != 0 {
            let (x2, y2) = (x, y);
            let (sin, cos) = TABLE[i];
            x = x2 * cos - y2 * sin;
            y = x2 * sin + y2 * cos;
        }
    }

    if neg {
        y = -y;
    }

    (y, x)
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sincos() {
        let _ = env_logger::builder().is_test(true).try_init();

        for i in 0..1000 {
            let x = (i as f64) * 0.01;

            let (sin_got, cos_got) = sincos(x);
            let (sin_exp, cos_exp) = (x.sin(), x.cos());

            log::trace!("(sin_got, cos_got) = {:?}", (sin_got, cos_got));
            log::trace!("(sin_exp, cos_exp) = {:?}", (sin_exp, cos_exp));

            assert!(
                (sin_got - sin_exp).abs() < 0.0001 && (cos_got - cos_exp).abs() < 0.0001,
                "{:?} (got) != {:?} (expected)",
                (sin_got, cos_got),
                (sin_exp, cos_exp),
            );
        }
    }
}
